stages:
  - build
  - replay-and-sync
  - test
  - test-report-aggregate
  - deploy
  - publish
  - cleanup

variables:
  # Variables required by Common CI jobs
  CI_COMMON_JOB_VERSION: 'e74d7109838ff05fdc239bced6a726aa7ad46a9b'
  DOCKER_BUILDER_TAG: '$CI_COMMON_JOB_VERSION'
  DOCKER_DIND_TAG: '$CI_COMMON_JOB_VERSION'
  IMAGE_REMOVER_TAG: '$CI_COMMON_JOB_VERSION'

  # Git settings
  GIT_DEPTH: 20
  GIT_SUBMODULE_STRATEGY: none
  GIT_STRATEGY: clone

  # Runner feature flags
  FF_ENABLE_JOB_CLEANUP: 1

  # HAF API node configuration
  API_NODE_VERSION: "1.27.8"
  API_NODE_TAG: "denser-11"
  HAF_IMAGE_REGISTRY: "registry.gitlab.syncad.com/hive/haf/mirrornet-instance"
  HAF_IMAGE_NAME: "${HAF_IMAGE_REGISTRY}:${API_NODE_VERSION}"
  BLOCK_LOG_VERSION: "f8a89045"
  # BLOCK_LOG_SOURCE_DIR: "/blockchain/block_log_mirror_44"
  REPLAY_DIRECTORY_PREFIX: "/cache/replay_data_denser_haf_api_node"
  REPLAY_DIRECTORY: "${REPLAY_DIRECTORY_PREFIX}_${API_NODE_TAG}_${API_NODE_VERSION}_${BLOCK_LOG_VERSION}"
  REPLAY_PIPELINE_DIRECTORY: "${REPLAY_DIRECTORY_PREFIX}_${CI_PIPELINE_ID}"
  DOCKER_TLS_CERTDIR: "${REPLAY_PIPELINE_DIRECTORY}_certs"
  BLOCK_LOG_SOURCE: "${REPLAY_PIPELINE_DIRECTORY}_block_log"
  BLOCK_LOG_SOURCE_DIR: "${BLOCK_LOG_SOURCE}"

  # Other settings
  CADDY_TAG: "2.7.6"
  PLAYWRIGHT_TAG: "v1.49.1-jammy"

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - project: 'hive/common-ci-configuration'
    ref: e74d7109838ff05fdc239bced6a726aa7ad46a9b
    file: 
      - '/templates/docker_image_jobs.gitlab-ci.yml'
      - '/templates/cache_cleanup.gitlab-ci.yml'
  - local: 'environments/common.yml'
  - local: 'environments/develop.yml'
  - local: 'environments/production.yml'
  - local: 'templates/denser-deploy.yml'
  - project: 'hive/haf'
    ref: b7870f229cc0d45993a648ab9a15b0b4a12e7fe5 #develop
    file: '/scripts/ci-helpers/prepare_data_image_job.yml'    
  - project: 'hive/haf_api_node'
    ref: denser-11
    file: 'ci/node-replay.gitlab-ci.yml'  

.docker_build_template:
  extends: .docker_image_builder_job_template
  stage: build
  before_script:
    - !reference [.docker_image_builder_job_template, before_script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script: scripts/ci-helpers/docker-build-template-script.sh
  artifacts:
    paths:
      - ${TURBO_APP_NAME}-docker-build.env
    reports:
      dotenv: ${TURBO_APP_NAME}-docker-build.env
  tags:
    - public-runner-docker
    - hived-for-tests

mirrornet-haf-binaries-extraction:
  extends: .job-defaults
  stage: build
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [ "" ]
  variables:
    BINARY_CACHE_PATH: "${CI_PROJECT_DIR}/hived-mirrornet-binaries"
    GIT_SUBMODULE_STRATEGY: recursive
  script: "cp --recursive /home/hived/bin ${BINARY_CACHE_PATH}"
  artifacts:
    when: on_success
    paths:
      - "${BINARY_CACHE_PATH}"
  tags:
    - public-runner-docker
    - hived-for-tests

docker-build-auth:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    TURBO_APP_NAME: 'auth'

docker-build-blog:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    TURBO_APP_NAME: 'blog'

docker-build-wallet:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    TURBO_APP_NAME: 'wallet'

# Hived binary built as a part of HAF requires an additional
# library to function. This library has to be extracted from
# the image and passed to job extended_block_log_creation.
library_extraction:
  extends: .job-defaults
  stage: build
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: [ "" ]
  needs:
    - job: "mirrornet-haf-binaries-extraction"
      artifacts: true
  variables:
    BINARY_CACHE_PATH: "${CI_PROJECT_DIR}/hived-mirrornet-binaries"
  script: scripts/ci-helpers/library-extraction.sh
  artifacts:
    when: on_success
    paths:
      - "${BINARY_CACHE_PATH}"
  tags:
    - public-runner-docker

extended_block_log_creation:
  extends: .extended_block_log_creation
  stage: build
  needs:
    - job: "mirrornet-haf-binaries-extraction"
      artifacts: true
    - job: "library_extraction"
      artifacts: true 
  variables:
    GIT_SUBMODULE_STRATEGY: "recursive"
    REGISTRY: "registry.gitlab.syncad.com/hive/hive"
    REGISTRY_USER: "${HIVED_CI_IMGBUILDER_USER}"
    REGISTRY_PASS: "${HIVED_CI_IMGBUILDER_PASSWORD}"
    IMAGE_TAG: "${BLOCK_LOG_VERSION}"
    HIVE_SRC: "${CI_PROJECT_DIR}/haf/hive"
    HIVE_COMMIT: "${BLOCK_LOG_VERSION}"
    BLOCK_LOG_SOURCE_DIR: "/blockchain/block_log_5m"
    BINARY_PATH: "${CI_PROJECT_DIR}/hived-mirrornet-binaries"
    LD_LIBRARY_PATH: "${BINARY_PATH}"
  tags:
    - public-runner-docker
    - hived-for-tests

block-log-extraction:
  extends: .docker_image_builder_job_template
  stage: replay-and-sync
  needs:
    - extended_block_log_creation
  variables:
    GIT_SUBMODULE_STRATEGY: "recursive"
    BLOCK_LOG_DIRECTORY: "${REPLAY_PIPELINE_DIRECTORY}_block_log"
  script: scripts/ci-helpers/block-log-extraction.sh
  tags:
    - data-cache-storage

block_log_processing:
  extends: .job-defaults
  image: "registry.gitlab.syncad.com/hive/hive/ci-base-image${TEST_IMAGE_TAG}"
  stage: replay-and-sync
  needs:
    - mirrornet-haf-binaries-extraction
    - block-log-extraction
  variables:
    BLOCK_LOG_UTIL_PATH: "${CI_PROJECT_DIR}/hived-mirrornet-binaries/block_log_util"
  script: scripts/ci-helpers/block-log-processing.sh
  artifacts:
    reports:
      dotenv:
        - "block_log_data.env" 
    paths:
      - "*.log"
      - "block_log_data.env"
  tags:
    - data-cache-storage

mirrornet-haf-node-replay:
  extends: .haf-node-replay
  stage: replay-and-sync
  timeout: 3 hours
  needs:
    - mirrornet-haf-binaries-extraction
    - block_log_processing
  variables:
    GIT_STRATEGY: "clone"
    CI_DEBUG_SERVICES: "false" # Change to true to debug services in this job
    # LAST_BLOCK_NUMBER: "5004741"
    ARGUMENTS: "--chain-id=44 --skeleton-key=5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --replay-blockchain --stop-at-block ${LAST_BLOCK_NUMBER} --alternate-chain-spec=/home/hived/datadir/blockchain/alternate-chain-spec.json"
    # FAKETIME: "@2016-09-16 01:39:06"
    FAKETIME: ${HEAD_BLOCK_TIMESTAMP}
    ADDITIONAL_CONFIGURATION_SCRIPT: "scripts/ci-helpers/copy-mirrornet-haf-config.sh"
    REPLAY_TIMEOUT: 9000
    HAF_IMAGE: ${HAF_IMAGE_REGISTRY}
    HIVE_API_NODE_VERSION: ${API_NODE_VERSION}
  tags:
    - data-cache-storage

.node-job:
  extends: .job-defaults
  image:
    name: node:20.11.1-alpine3.18
    entrypoint: []
  stage: test
  before_script:
    - corepack enable
    - corepack prepare pnpm@9.6.0 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):deps[collapsed=true]\r\e[0KInstalling dependencies..."
      pnpm install --frozen-lockfile
      echo -e "\e[0Ksection_end:$(date +%s):deps\r\e[0K"
  cache:
    key: '$TURBO_APP_SCOPE-cache-2'
    paths:
      - .npm/
      - .pnpm-store/
      - .next/
  artifacts:
    name: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker

.e2e_tests_template:
  extends: .node-job
  image: mcr.microsoft.com/playwright:${PLAYWRIGHT_TAG}
  variables:
    CI_DEBUG_SERVICES: true
    FF_NETWORK_PER_BUILD: 1
    REACT_APP_API_ENDPOINT: https://api.hive.blog
    REACT_APP_IMAGES_ENDPOINT: https://images.hive.blog/
    DENSER_URL: https://caddy
  parallel:
    matrix:
      - PROJECT: ['chromium', 'firefox', 'webkit']
        SHARD_INDEX: [1, 2, 3, 4, 5]
        SHARD_TOTAL: 5
  script:
    - !reference [.node-job, script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):tests[collapsed=false]\r\e[0KRunning tests..."
      cd .$TURBO_APP_PATH
      npx playwright test --project=$PROJECT --shard=$SHARD_INDEX/$SHARD_TOTAL --update-snapshots
      echo -e "\e[0Ksection_end:$(date +%s):tests\r\e[0K"
  artifacts:
    paths:
      - .${TURBO_APP_PATH}/playwright-report/
      - .${TURBO_APP_PATH}/test-results/
      - .${TURBO_APP_PATH}/junit/
    reports:
      junit: .${TURBO_APP_PATH}/junit/**/**/results.xml

mirrornet-replay-data-copy:
  extends: .haf_api_node_replay_data_copy
  stage: test
  needs:
    - mirrornet-haf-node-replay 
  tags:
    - data-cache-storage

mirrornet-based-tests:
  extends: 
    - .haf_api_node_test
    - .node-job
  needs:
    - mirrornet-haf-binaries-extraction
    - docker-build-auth
    - docker-build-blog
    - docker-build-wallet
    - mirrornet-replay-data-copy
    - block_log_processing
  image: "mcr.microsoft.com/playwright:${PLAYWRIGHT_TAG}"
  services:
    - !reference [.haf_api_node_test, services]
    - name: $BLOG_IMAGE_NAME
      alias: denser-blog
      variables:
        HEALTHCHECK_TCP_PORT: '3000'
        PORT: "3000"
        REACT_APP_SITE_DOMAIN: "https://caddy-blog.local"
        REACT_APP_WALLET_ENDPOINT: "https://caddy-wallet"
        TURBO_APP_SCOPE: '@hive/blog'
        TURBO_APP_PATH: '/apps/blog'
    - name: caddy:${CADDY_TAG}
      alias: caddy-blog
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy-blog
        - --to=denser-blog:3000
        - --internal-certs
        # - --debug
        # - --access-log
    - name: $WALLET_IMAGE_NAME
      alias: denser-wallet
      variables:
        HEALTHCHECK_TCP_PORT: '4000'
        PORT: "4000"
        REACT_APP_SITE_DOMAIN: "https://caddy-wallet.local"
        REACT_APP_BLOG_DOMAIN: "https://caddy-blog"
        TURBO_APP_SCOPE: '@hive/wallet'
        TURBO_APP_PATH: '/apps/wallet'
    - name: caddy:${CADDY_TAG}
      alias: caddy-wallet
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy-wallet
        - --to=denser-wallet:4000
        - --internal-certs
        # - --debug
        # - --access-log
    - name: $AUTH_IMAGE_NAME
      alias: denser-auth
      variables:
        HEALTHCHECK_TCP_PORT: '5000'
        PORT: '5000'
        REACT_APP_SITE_DOMAIN: "https://caddy-auth.local"
        TURBO_APP_SCOPE: '@hive/auth'
        TURBO_APP_PATH: '/apps/auth'
    - name: caddy:${CADDY_TAG}
      alias: caddy-auth
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy-auth
        - --to=denser-auth:5000
        - --internal-certs
        # - --debug
        # - --access-log
  variables:
    GIT_STRATEGY: "clone"
    CI_DEBUG_SERVICES: "false"
    ARGUMENTS: "--chain-id=44 --skeleton-key=5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --alternate-chain-spec=/home/hived/datadir/blockchain/alternate-chain-spec.json"
    FAKETIME: ${HEAD_BLOCK_TIMESTAMP}
    HAF_IMAGE: ${HAF_IMAGE_REGISTRY}
    HIVE_API_NODE_VERSION: ${API_NODE_VERSION}
    REACT_APP_API_ENDPOINT: "https://dind/"
    REACT_APP_IMAGES_ENDPOINT: "https://images.hive.blog/"
    REACT_APP_CHAIN_ID: "44"
    REACT_APP_LOGGING_BROWSER_ENABLED: "true"
    NODE_TLS_REJECT_UNAUTHORIZED: 0
  timeout: 3 hours
  script: scripts/ci-helpers/run-mirrornet-tests.sh
  after_script:
    - |
      cp "${REPLAY_PIPELINE_DIRECTORY}/docker_entrypoint.log" "${CI_PROJECT_DIR}/haf.log"
      cp --recursive "${REPLAY_PIPELINE_DIRECTORY}/logs" "${CI_PROJECT_DIR}/logs"
  cache:
    key: "mirrornet-tests-1"    
  artifacts:
    paths:
      - "*.log"
      - "logs/"
      - "*.env"
      - "apps/blog/playwright-report/"
      - "apps/blog/test-results/"
      - "apps/blog/junit/"
    reports:
      junit: "apps/blog/junit/results.xml"
  tags:
    - data-cache-storage

e2e-tests-blog:
  extends: .e2e_tests_template
  needs:
    - docker-build-blog
  services:
    - name: $BLOG_IMAGE_NAME
      alias: denser
      variables:
        HEALTHCHECK_TCP_PORT: '3000'
    - name: caddy:${CADDY_TAG}
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy
        - --to=denser:3000
        - --internal-certs
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    PORT: 3000

e2e-tests-wallet:
  extends: .e2e_tests_template
  needs:
    - docker-build-wallet
  services:
    - name: $WALLET_IMAGE_NAME
      alias: denser
      variables:
        HEALTHCHECK_TCP_PORT: '4000'
    - name: caddy:${CADDY_TAG}
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy
        - --to=denser:4000
        - --internal-certs
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    PORT: 4000

.e2e_report_aggregate_template:
  extends: .node-job
  stage: test-report-aggregate
  when: always
  image: mcr.microsoft.com/playwright:${PLAYWRIGHT_TAG}
  script:
    - cd .$TURBO_APP_PATH
    - pnpm install -D playwright-merge-html-reports
    - ./node_modules/.bin/playwright test tests/merge-reports --config playwright.merge.config.ts
  artifacts:
    paths:
      - .${TURBO_APP_PATH}/merged-html-report/
      - .${TURBO_APP_PATH}/junit/

e2e-report-aggregate-blog:
  extends: .e2e_report_aggregate_template
  needs:
    - e2e-tests-blog
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    PROJECTS: '["chromium", "firefox", "webkit"]'
    SHARD_TOTAL: 5

e2e-report-aggregate-wallet:
  extends: .e2e_report_aggregate_template
  needs:
    - e2e-tests-wallet
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    PROJECTS: '["chromium", "firefox", "webkit"]'
    SHARD_TOTAL: 5

publish:
  image:
    name: node:20.11.1-alpine3.18
    entrypoint: [ "" ]
  extends: .job-defaults
  stage: deploy
  script:
    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
      allow_failure: true
  tags:
    - public-runner-docker

.deploy_template_for_staging:
  extends: .job-defaults
  stage: deploy
  before_script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script:
    - |
      scripts/run_instance.sh \
        --image="$IMAGE_NAME" \
        --app-scope="$TURBO_APP_SCOPE" \
        --app-path="$TURBO_APP_PATH" \
        --api-endpoint="$API_ENDPOINT" \
        --chain-id="$CHAIN_ID" \
        --images-endpoint="$IMAGES_ENDPOINT" \
        --name="$CONTAINER_NAME" \
        --port=$PORT \
        --detach
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  tags:
    - hs-denser

staging:deploy-auth:
  extends: .deploy_template_for_staging
  needs:
    - docker-build-auth
  script:
    - export IMAGE_NAME="${AUTH_IMAGE_NAME}"
    - !reference [ .deploy_template_for_staging , script ]
  variables:
    PORT: 7000
    API_ENDPOINT: https://api.hive.blog
    IMAGES_ENDPOINT: https://images.hive.blog/
    CONTAINER_NAME: denser-auth
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    EXPLORER_DOMAIN: 'https://explore.openhive.network'
  environment:
    name: staging-auth
    action: start
    on_stop: staging:stop-auth

staging:deploy-blog:
  extends: .deploy_template_for_staging
  needs:
    - docker-build-blog
  script:
    - export IMAGE_NAME="${BLOG_IMAGE_NAME}"
    - !reference [ .deploy_template_for_staging , script ]  
  variables:
    PORT: 3000
    API_ENDPOINT: https://api.hive.blog
    IMAGES_ENDPOINT: https://images.hive.blog/
    WALLET_ENDPOINT: https://wallet.openhive.network
    CONTAINER_NAME: denser-blog
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    EXPLORER_DOMAIN: 'https://explore.openhive.network'
  environment:
    name: staging-blog
    action: start
    on_stop: staging:stop-blog

staging:deploy-wallet:
  extends: .deploy_template_for_staging
  needs:
    - docker-build-wallet
  script:
    - export IMAGE_NAME="${WALLET_IMAGE_NAME}"
    - !reference [ .deploy_template_for_staging , script ]   
  variables:
    PORT: 4000
    API_ENDPOINT: https://api.hive.blog
    IMAGES_ENDPOINT: https://images.hive.blog/
    CONTAINER_NAME: denser-wallet
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    EXPLORER_DOMAIN: 'https://explore.openhive.network'
  environment:
    name: staging-wallet
    action: start
    on_stop: staging:stop-wallet

.stop_template_for_staging:
  extends: .job-defaults
  stage: deploy
  script:
    - docker ps -q --filter "name=$CONTAINER_NAME" | grep -q . && docker stop $CONTAINER_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  tags:
    - hs-denser

staging:stop-auth:
  extends: .stop_template_for_staging
  needs:
    - staging:deploy-auth
  environment:
    name: staging-auth
    action: stop
  variables:
    CONTAINER_NAME: denser-auth
    GIT_STRATEGY: none

staging:stop-blog:
  extends: .stop_template_for_staging
  needs:
    - staging:deploy-blog
  environment:
    name: staging-blog
    action: stop
  variables:
    CONTAINER_NAME: denser-blog
    GIT_STRATEGY: none

staging:stop-wallet:
  extends: .stop_template_for_staging
  needs:
    - staging:deploy-wallet
  environment:
    name: staging-wallet
    action: stop
  variables:
    CONTAINER_NAME: denser-wallet
    GIT_STRATEGY: none

review:deploy-auth:
  extends: staging:deploy-auth
  variables:
    CONTAINER_NAME: denser-review-auth
    PORT: 7001
    AUTH_PORT: 7001
    API_ENDPOINT: https://api.fake.openhive.network/
    CHAIN_ID: '42'
    IMAGES_ENDPOINT: https://images.hive.blog/
    SITE_DOMAIN: https://auth.fake.openhive.network
    LOGGING_BROWSER_ENABLED: false
    LOGGING_LOG_LEVEL: info
    EXPLORER_DOMAIN: 'https://testexplorer.openhive.network'
  environment:
    name: review-auth
    action: start
    on_stop: review:stop-auth

review:deploy-blog:
  extends: staging:deploy-blog
  variables:
    CONTAINER_NAME: denser-review-blog
    PORT: 3001
    BLOG_PORT: 3001
    API_ENDPOINT: https://api.fake.openhive.network/
    CHAIN_ID: '42'
    IMAGES_ENDPOINT: https://images.hive.blog/
    WALLET_ENDPOINT: https://wallet.fake.openhive.network
    BLOG_DOMAIN: https://blog.fake.openhive.network
    LOGGING_BROWSER_ENABLED: false
    LOGGING_LOG_LEVEL: info
    EXPLORER_DOMAIN: 'https://testexplorer.openhive.network'
  environment:
    name: review-blog
    action: start
    on_stop: review:stop-blog

review:deploy-wallet:
  extends: staging:deploy-wallet
  variables:
    CONTAINER_NAME: denser-review-wallet
    PORT: 4001
    WALLET_PORT: 4001
    API_ENDPOINT: https://api.fake.openhive.network/
    CHAIN_ID: '42'
    IMAGES_ENDPOINT: https://images.hive.blog/
    SITE_DOMAIN: https://wallet.fake.openhive.network
    BLOG_DOMAIN: https://blog.fake.openhive.network
    LOGGING_BROWSER_ENABLED: false
    LOGGING_LOG_LEVEL: info
    EXPLORER_DOMAIN: 'https://testexplorer.openhive.network'
  environment:
    name: review-wallet
    action: start
    on_stop: review:stop-wallet

review:stop-auth:
  extends: staging:stop-auth
  needs:
    - review:deploy-auth
  variables:
    CONTAINER_NAME: denser-review-auth
  environment:
    name: review-auth
    action: stop

review:stop-blog:
  extends: staging:stop-blog
  needs:
    - review:deploy-blog
  variables:
    CONTAINER_NAME: denser-review-blog
  environment:
    name: review-blog
    action: stop

review:stop-wallet:
  extends: staging:stop-wallet
  needs:
    - review:deploy-wallet
  variables:
    CONTAINER_NAME: denser-review-wallet
  environment:
    name: review-wallet
    action: stop

build_and_publish_auth_image:
  stage: publish
  extends: .publish_docker_image_template
  variables:
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    TURBO_APP_NAME: 'auth'
  before_script:
    - !reference [.publish_docker_image_template, before_script]
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
    - hived-for-tests

build_and_publish_blog_image:
  stage: publish
  extends: .publish_docker_image_template
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    TURBO_APP_NAME: 'blog'
  before_script:
    - !reference [.publish_docker_image_template, before_script]
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
    - hived-for-tests

build_and_publish_wallet_image:
  stage: publish
  extends: .publish_docker_image_template
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    TURBO_APP_NAME: 'wallet'
  before_script:
    - !reference [.publish_docker_image_template, before_script]
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
    - hived-for-tests

buildkit_cache_cleanup:
  stage: cleanup
  extends: .buildkit_cleanup_job_template
  needs: []
  variables:
    CACHE_REPOSITORIES: "auth/cache,blog/cache,wallet/cache"

# Deletes replay data used by the tests and created by mirrornet-replay-data-copy
cleanup_haf_api_node_pipeline_cache:
  needs:
    - mirrornet-replay-data-copy
    - mirrornet-based-tests
  extends: 
    - .cleanup_cache_manual_template
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "${REPLAY_PIPELINE_DIRECTORY}*"
  when: always
  tags:
    - data-cache-storage

# Deletes all HAF API node replay data
cleanup_haf_api_node_cache_manual:
  extends: 
    - .cleanup_cache_manual_template
  needs: []
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "${REPLAY_DIRECTORY_PREFIX}*"
  tags:
    - data-cache-storage

# Deletes HAF API node replay data older than 7 days
cleanup_old_haf_api_node_cache:
  extends:
    - .cleanup_old_cache_template
  needs: []
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "${REPLAY_DIRECTORY_PREFIX}*"
  tags:
    - data-cache-storage

# Development Mainnet Deployments
deploy:dev:auth:mainnet:
  extends: 
    - .denser_deploy_template
    - .develop_mainnet
  variables:
    APP_NAME: auth
    PORT: $AUTH_PORT
    CONTAINER_NAME: denser-dev-auth-mainnet

deploy:dev:blog:mainnet:
  extends: 
    - .denser_deploy_template
    - .develop_mainnet
  variables:
    APP_NAME: blog
    PORT: $BLOG_PORT
    CONTAINER_NAME: denser-dev-blog-mainnet

deploy:dev:wallet:mainnet:
  extends: 
    - .denser_deploy_template
    - .develop_mainnet
  variables:
    APP_NAME: wallet
    PORT: $WALLET_PORT
    CONTAINER_NAME: denser-dev-wallet-mainnet

# Development Mirrornet Deployments
deploy:dev:blog:mirrornet:
  extends: 
    - .denser_deploy_template
    - .develop_mirrornet
  variables:
    APP_NAME: blog
    PORT: $BLOG_PORT
    CONTAINER_NAME: denser-dev-blog-mirrornet

deploy:dev:wallet:mirrornet:
  extends: 
    - .denser_deploy_template
    - .develop_mirrornet
  variables:
    APP_NAME: wallet
    PORT: $WALLET_PORT
    CONTAINER_NAME: denser-dev-wallet-mirrornet

deploy:dev:auth:mirrornet:
  extends: 
    - .denser_deploy_template
    - .develop_mirrornet
  variables:
    APP_NAME: auth
    PORT: $AUTH_PORT
    CONTAINER_NAME: denser-dev-auth-mirrornet

# Production Mainnet Deployments
deploy:prod:blog:mainnet:
  extends: 
    - .denser_deploy_template
    - .production_mainnet
  variables:
    APP_NAME: blog
    PORT: $BLOG_PORT
    CONTAINER_NAME: denser-prod-blog-mainnet

deploy:prod:wallet:mainnet:
  extends: 
    - .denser_deploy_template
    - .production_mainnet
  variables:
    APP_NAME: wallet
    PORT: $WALLET_PORT
    CONTAINER_NAME: denser-prod-wallet-mainnet

deploy:prod:auth:mainnet:
  extends: 
    - .denser_deploy_template
    - .production_mainnet
  variables:
    APP_NAME: auth
    PORT: $AUTH_PORT
    CONTAINER_NAME: denser-prod-auth-mainnet

# Production Mirrornet Deployments
deploy:prod:blog:mirrornet:
  extends: 
    - .denser_deploy_template
    - .production_mirrornet
  variables:
    APP_NAME: blog
    PORT: $BLOG_PORT
    CONTAINER_NAME: denser-prod-blog-mirrornet

deploy:prod:wallet:mirrornet:
  extends: 
    - .denser_deploy_template
    - .production_mirrornet
  variables:
    APP_NAME: wallet
    PORT: $WALLET_PORT
    CONTAINER_NAME: denser-prod-wallet-mirrornet

deploy:prod:auth:mirrornet:
  extends: 
    - .denser_deploy_template
    - .production_mirrornet
  variables:
    APP_NAME: auth
    PORT: $AUTH_PORT
    CONTAINER_NAME: denser-prod-auth-mirrornet