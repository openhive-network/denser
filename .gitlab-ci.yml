stages:
  - build
  - replay-and-sync
  - test
  - test-report-aggregate
  - deploy-mainnet
  - deploy-mirrornet
  - publish
  - cleanup

variables:
  # Variables required by Common CI jobs
  CI_COMMON_JOB_VERSION: 'e74d7109838ff05fdc239bced6a726aa7ad46a9b'
  DOCKER_BUILDER_TAG: '$CI_COMMON_JOB_VERSION'
  DOCKER_DIND_TAG: '$CI_COMMON_JOB_VERSION'
  IMAGE_REMOVER_TAG: '$CI_COMMON_JOB_VERSION'

  # Git settings
  GIT_DEPTH: 20
  GIT_SUBMODULE_STRATEGY: none
  GIT_STRATEGY: clone

  # Runner feature flags
  FF_ENABLE_JOB_CLEANUP: 1

  # HAF API node configuration
  API_NODE_VERSION: '1.27.8'
  API_NODE_TAG: 'denser-11'
  HAF_IMAGE_REGISTRY: 'registry.gitlab.syncad.com/hive/haf/mirrornet-instance'
  HAF_IMAGE_NAME: '${HAF_IMAGE_REGISTRY}:${API_NODE_VERSION}'
  BLOCK_LOG_VERSION: 'f8a89045'
  # BLOCK_LOG_SOURCE_DIR: "/blockchain/block_log_mirror_44"
  REPLAY_DIRECTORY_PREFIX: '/cache/replay_data_denser_haf_api_node'
  REPLAY_DIRECTORY: '${REPLAY_DIRECTORY_PREFIX}_${API_NODE_TAG}_${API_NODE_VERSION}_${BLOCK_LOG_VERSION}'
  REPLAY_PIPELINE_DIRECTORY: '${REPLAY_DIRECTORY_PREFIX}_${CI_PIPELINE_ID}'
  DOCKER_TLS_CERTDIR: '${REPLAY_PIPELINE_DIRECTORY}_certs'
  BLOCK_LOG_SOURCE: '${REPLAY_PIPELINE_DIRECTORY}_block_log'
  BLOCK_LOG_SOURCE_DIR: '${BLOCK_LOG_SOURCE}'

  # Other settings
  CADDY_TAG: '2.7.6'
  PLAYWRIGHT_TAG: 'v1.49.1-jammy'

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - project: 'hive/common-ci-configuration'
    ref: e74d7109838ff05fdc239bced6a726aa7ad46a9b # develop
    file:
      - '/templates/docker_image_jobs.gitlab-ci.yml'
      - '/templates/cache_cleanup.gitlab-ci.yml'
  - project: 'hive/haf'
    ref: b7870f229cc0d45993a648ab9a15b0b4a12e7fe5 #develop
    file: '/scripts/ci-helpers/prepare_data_image_job.yml'
  - project: 'hive/haf_api_node'
    ref: denser-11
    file: 'ci/node-replay.gitlab-ci.yml'

.docker_build_template:
  extends: .docker_image_builder_job_template
  stage: build
  before_script:
    - !reference [.docker_image_builder_job_template, before_script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script:
    - |
      # Create a default env file in case the build fails
      echo "${TURBO_APP_NAME}_IMAGE_NAME=${CI_REGISTRY_IMAGE}/${TURBO_APP_NAME}:${CI_COMMIT_SHA}" > ${TURBO_APP_NAME}-docker-build.env
      scripts/ci-helpers/docker-build-template-script.sh
  artifacts:
    paths:
      - ${TURBO_APP_NAME}-docker-build.env
    reports:
      dotenv: ${TURBO_APP_NAME}-docker-build.env
    when: always  # This ensures artifacts are created even if job fails
  tags:
    - public-runner-docker
    - hived-for-tests

mirrornet-haf-binaries-extraction:
  extends: .job-defaults
  stage: build
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: ['']
  variables:
    BINARY_CACHE_PATH: '${CI_PROJECT_DIR}/hived-mirrornet-binaries'
    GIT_SUBMODULE_STRATEGY: recursive
  script: 'cp --recursive /home/hived/bin ${BINARY_CACHE_PATH}'
  artifacts:
    when: on_success
    paths:
      - '${BINARY_CACHE_PATH}'
  tags:
    - public-runner-docker
    - hived-for-tests

docker-build-auth:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    TURBO_APP_NAME: 'auth'

docker-build-blog:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    TURBO_APP_NAME: 'blog'

docker-build-wallet:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    TURBO_APP_NAME: 'wallet'

# Hived binary built as a part of HAF requires an additional
# library to function. This library has to be extracted from
# the image and passed to job extended_block_log_creation.
library_extraction:
  extends: .job-defaults
  stage: build
  image:
    name: $HAF_IMAGE_NAME
    entrypoint: ['']
  needs:
    - job: 'mirrornet-haf-binaries-extraction'
      artifacts: true
  variables:
    BINARY_CACHE_PATH: '${CI_PROJECT_DIR}/hived-mirrornet-binaries'
  script: scripts/ci-helpers/library-extraction.sh
  artifacts:
    when: on_success
    paths:
      - '${BINARY_CACHE_PATH}'
  tags:
    - public-runner-docker
    - hived-for-tests

extended_block_log_creation:
  extends: .extended_block_log_creation
  stage: build
  needs:
    - job: 'mirrornet-haf-binaries-extraction'
      artifacts: true
    - job: 'library_extraction'
      artifacts: true
  variables:
    GIT_SUBMODULE_STRATEGY: 'recursive'
    REGISTRY: 'registry.gitlab.syncad.com/hive/hive'
    REGISTRY_USER: '${HIVED_CI_IMGBUILDER_USER}'
    REGISTRY_PASS: '${HIVED_CI_IMGBUILDER_PASSWORD}'
    IMAGE_TAG: '${BLOCK_LOG_VERSION}'
    HIVE_SRC: '${CI_PROJECT_DIR}/haf/hive'
    HIVE_COMMIT: '${BLOCK_LOG_VERSION}'
    BLOCK_LOG_SOURCE_DIR: '/blockchain/block_log_5m'
    BINARY_PATH: '${CI_PROJECT_DIR}/hived-mirrornet-binaries'
    LD_LIBRARY_PATH: '${BINARY_PATH}'
  tags:
    - public-runner-docker
    - hived-for-tests

block-log-extraction:
  extends: .docker_image_builder_job_template
  stage: replay-and-sync
  needs:
    - extended_block_log_creation
  variables:
    GIT_SUBMODULE_STRATEGY: 'recursive'
    BLOCK_LOG_DIRECTORY: '${REPLAY_PIPELINE_DIRECTORY}_block_log'
  script: scripts/ci-helpers/block-log-extraction.sh
  tags:
    - data-cache-storage

block_log_processing:
  extends: .job-defaults
  image: 'registry.gitlab.syncad.com/hive/hive/ci-base-image${TEST_IMAGE_TAG}'
  stage: replay-and-sync
  needs:
    - mirrornet-haf-binaries-extraction
    - block-log-extraction
  variables:
    BLOCK_LOG_UTIL_PATH: '${CI_PROJECT_DIR}/hived-mirrornet-binaries/block_log_util'
  script: scripts/ci-helpers/block-log-processing.sh
  artifacts:
    reports:
      dotenv:
        - 'block_log_data.env'
    paths:
      - '*.log'
      - 'block_log_data.env'
  tags:
    - data-cache-storage

mirrornet-haf-node-replay:
  extends: .haf-node-replay
  stage: replay-and-sync
  timeout: 3 hours
  needs:
    - mirrornet-haf-binaries-extraction
    - block_log_processing
  variables:
    GIT_STRATEGY: 'clone'
    CI_DEBUG_SERVICES: 'false' # Change to true to debug services in this job
    # LAST_BLOCK_NUMBER: "5004741"
    ARGUMENTS: '--chain-id=44 --skeleton-key=5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --replay-blockchain --stop-at-block ${LAST_BLOCK_NUMBER} --alternate-chain-spec=/home/hived/datadir/blockchain/alternate-chain-spec.json'
    # FAKETIME: "@2016-09-16 01:39:06"
    FAKETIME: ${HEAD_BLOCK_TIMESTAMP}
    ADDITIONAL_CONFIGURATION_SCRIPT: 'scripts/ci-helpers/copy-mirrornet-haf-config.sh'
    REPLAY_TIMEOUT: 9000
    HAF_IMAGE: ${HAF_IMAGE_REGISTRY}
    HIVE_API_NODE_VERSION: ${API_NODE_VERSION}
  tags:
    - data-cache-storage

.node-job:
  extends: .job-defaults
  image:
    name: node:20.11.1-alpine3.18
    entrypoint: []
  stage: test
  before_script:
    - corepack enable
    - corepack prepare pnpm@9.6.0 --activate
    - pnpm config set store-dir .pnpm-store
  script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):deps[collapsed=true]\r\e[0KInstalling dependencies..."
      pnpm install --frozen-lockfile
      echo -e "\e[0Ksection_end:$(date +%s):deps\r\e[0K"
  cache:
    key: '$TURBO_APP_SCOPE-cache-2'
    paths:
      - .npm/
      - .pnpm-store/
      - .next/
  artifacts:
    name: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker

.e2e_tests_template:
  extends: .node-job
  image: mcr.microsoft.com/playwright:${PLAYWRIGHT_TAG}
  variables:
    CI_DEBUG_SERVICES: true
    FF_NETWORK_PER_BUILD: 1
    REACT_APP_API_ENDPOINT: https://api.hive.blog
    REACT_APP_IMAGES_ENDPOINT: https://images.hive.blog/
    DENSER_URL: https://caddy
  parallel:
    matrix:
      - PROJECT: ['chromium', 'firefox', 'webkit']
        SHARD_INDEX: [1, 2, 3, 4, 5]
        SHARD_TOTAL: 5
  script:
    - !reference [.node-job, script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):tests[collapsed=false]\r\e[0KRunning tests..."
      cd .$TURBO_APP_PATH
      npx playwright test --project=$PROJECT --shard=$SHARD_INDEX/$SHARD_TOTAL --update-snapshots
      echo -e "\e[0Ksection_end:$(date +%s):tests\r\e[0K"
  artifacts:
    paths:
      - .${TURBO_APP_PATH}/playwright-report/
      - .${TURBO_APP_PATH}/test-results/
      - .${TURBO_APP_PATH}/junit/
    reports:
      junit: .${TURBO_APP_PATH}/junit/**/**/results.xml

mirrornet-replay-data-copy:
  extends: .haf_api_node_replay_data_copy
  stage: test
  needs:
    - mirrornet-haf-node-replay
  tags:
    - data-cache-storage

mirrornet-based-tests:
  extends:
    - .haf_api_node_test
    - .node-job
  needs:
    - mirrornet-haf-binaries-extraction
    - docker-build-auth
    - docker-build-blog
    - docker-build-wallet
    - mirrornet-replay-data-copy
    - block_log_processing
  image: 'mcr.microsoft.com/playwright:${PLAYWRIGHT_TAG}'
  allow_failure: true
  services:
    - !reference [.haf_api_node_test, services]
    - name: $BLOG_IMAGE_NAME
      alias: denser-blog
      variables:
        HEALTHCHECK_TCP_PORT: '3000'
        PORT: '3000'
        REACT_APP_SITE_DOMAIN: 'https://caddy-blog.local'
        REACT_APP_WALLET_ENDPOINT: 'https://caddy-wallet'
        TURBO_APP_SCOPE: '@hive/blog'
        TURBO_APP_PATH: '/apps/blog'
    - name: caddy:${CADDY_TAG}
      alias: caddy-blog
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy-blog
        - --to=denser-blog:3000
        - --internal-certs
    - name: $WALLET_IMAGE_NAME
      alias: denser-wallet
      variables:
        HEALTHCHECK_TCP_PORT: '4000'
        PORT: '4000'
        REACT_APP_SITE_DOMAIN: 'https://caddy-wallet.local'
        REACT_APP_BLOG_DOMAIN: 'https://caddy-blog'
        TURBO_APP_SCOPE: '@hive/wallet'
        TURBO_APP_PATH: '/apps/wallet'
    - name: caddy:${CADDY_TAG}
      alias: caddy-wallet
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy-wallet
        - --to=denser-wallet:4000
        - --internal-certs
    - name: $AUTH_IMAGE_NAME
      alias: denser-auth
      variables:
        HEALTHCHECK_TCP_PORT: '5000'
        PORT: '5000'
        REACT_APP_SITE_DOMAIN: 'https://caddy-auth.local'
        TURBO_APP_SCOPE: '@hive/auth'
        TURBO_APP_PATH: '/apps/auth'
    - name: caddy:${CADDY_TAG}
      alias: caddy-auth
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy-auth
        - --to=denser-auth:5000
        - --internal-certs
  variables:
    GIT_STRATEGY: 'clone'
    CI_DEBUG_SERVICES: 'false'
    ARGUMENTS: '--chain-id=44 --skeleton-key=5JNHfZYKGaomSFvd4NUdQ9qMcEAC43kujbfjueTHpVapX1Kzq2n --alternate-chain-spec=/home/hived/datadir/blockchain/alternate-chain-spec.json'
    FAKETIME: ${HEAD_BLOCK_TIMESTAMP}
    HAF_IMAGE: ${HAF_IMAGE_REGISTRY}
    HIVE_API_NODE_VERSION: ${API_NODE_VERSION}
    REACT_APP_API_ENDPOINT: 'https://dind/'
    REACT_APP_IMAGES_ENDPOINT: 'https://images.hive.blog/'
    REACT_APP_CHAIN_ID: '44'
    REACT_APP_LOGGING_BROWSER_ENABLED: 'true'
    NODE_TLS_REJECT_UNAUTHORIZED: 0
  timeout: 3 hours
  script: scripts/ci-helpers/run-mirrornet-tests.sh
  after_script:
    - |
      cp "${REPLAY_PIPELINE_DIRECTORY}/docker_entrypoint.log" "${CI_PROJECT_DIR}/haf.log"
      cp --recursive "${REPLAY_PIPELINE_DIRECTORY}/logs" "${CI_PROJECT_DIR}/logs"
  cache:
    key: 'mirrornet-tests-1'
  artifacts:
    paths:
      - '*.log'
      - 'logs/'
      - '*.env'
      - 'playwright-report/'
      - 'test-results/'
      - 'junit/'
    reports:
      junit: 'junit/results.xml'
  tags:
    - data-cache-storage

e2e-tests-blog:
  extends: .e2e_tests_template
  needs:
    - docker-build-blog
  services:
    - name: $BLOG_IMAGE_NAME
      alias: denser
      variables:
        HEALTHCHECK_TCP_PORT: '3000'
    - name: caddy:${CADDY_TAG}
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy
        - --to=denser:3000
        - --internal-certs
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    PORT: 3000

e2e-tests-wallet:
  extends: .e2e_tests_template
  needs:
    - docker-build-wallet
  services:
    - name: $WALLET_IMAGE_NAME
      alias: denser
      variables:
        HEALTHCHECK_TCP_PORT: '4000'
    - name: caddy:${CADDY_TAG}
      command:
        - caddy
        - reverse-proxy
        - --from=https://caddy
        - --to=denser:4000
        - --internal-certs
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    PORT: 4000

.e2e_report_aggregate_template:
  extends: .node-job
  stage: test-report-aggregate
  when: always
  image: mcr.microsoft.com/playwright:${PLAYWRIGHT_TAG}
  script:
    - cd .$TURBO_APP_PATH
    - pnpm install -D playwright-merge-html-reports
    - ./node_modules/.bin/playwright test tests/merge-reports --config playwright.merge.config.ts
  artifacts:
    paths:
      - .${TURBO_APP_PATH}/merged-html-report/
      - .${TURBO_APP_PATH}/junit/

e2e-report-aggregate-blog:
  extends: .e2e_report_aggregate_template
  needs:
    - e2e-tests-blog
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    PROJECTS: '["chromium", "firefox", "webkit"]'
    SHARD_TOTAL: 5

e2e-report-aggregate-wallet:
  extends: .e2e_report_aggregate_template
  needs:
    - e2e-tests-wallet
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    PROJECTS: '["chromium", "firefox", "webkit"]'
    SHARD_TOTAL: 5

publish:
  image:
    name: node:20.11.1-alpine3.18
    entrypoint: ['']
  extends: .job-defaults
  stage: publish
  script:
    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
      allow_failure: true
  tags:
    - public-runner-docker

.deploy_template_mainnet:
  extends: .job-defaults
  stage: deploy-mainnet
  before_script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script:
    - |
      scripts/run_instance.sh \
        --image="$IMAGE_NAME" \
        --app-scope="$TURBO_APP_SCOPE" \
        --app-path="$TURBO_APP_PATH" \
        --api-endpoint="https://api.hive.blog" \
        --chain-id="beeab0de00000000000000000000000000000000000000000000000000000000" \
        --images-endpoint="https://images.hive.blog/" \
        --name="$CONTAINER_NAME" \
        --port=$PORT \
        --detach
  tags:
    - hs-denser

.deploy_template_mirrornet:
  extends: .deploy_template_mainnet
  stage: deploy-mirrornet
  script:
    - |
      scripts/run_instance.sh \
        --image="$IMAGE_NAME" \
        --app-scope="$TURBO_APP_SCOPE" \
        --app-path="$TURBO_APP_PATH" \
        --api-endpoint="https://api.fake.openhive.network/" \
        --chain-id="42" \
        --images-endpoint="https://images.hive.blog/" \
        --name="$CONTAINER_NAME" \
        --port=$PORT \
        --detach

# Main branch deployments (manual)
main:deploy-auth-mainnet:
  extends: .deploy_template_mainnet
  needs:
    - docker-build-auth
  variables:
    CONTAINER_NAME: denser-main-auth
    PORT: 9133
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    SITE_DOMAIN: https://auth.openhive.network
    EXPLORER_DOMAIN: https://explore.openhive.network
    IMAGE_NAME: $AUTH_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: main-auth-mainnet
    url: https://auth.openhive.network
    on_stop: main:stop-auth-mainnet

main:deploy-blog-mainnet:
  extends: .deploy_template_mainnet
  needs:
    - docker-build-blog
    - e2e-tests-blog
  variables:
    CONTAINER_NAME: denser-main-blog
    PORT: 9111
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    SITE_DOMAIN: https://blog.openhive.network
    WALLET_ENDPOINT: https://wallet.openhive.network
    EXPLORER_DOMAIN: https://explore.openhive.network
    IMAGE_NAME: $BLOG_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: main-blog-mainnet
    url: https://blog.openhive.network
    on_stop: main:stop-blog-mainnet

main:deploy-wallet-mainnet:
  extends: .deploy_template_mainnet
  needs:
    - docker-build-wallet
    - e2e-tests-wallet
  variables:
    CONTAINER_NAME: denser-main-wallet
    PORT: 9122
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    SITE_DOMAIN: https://wallet.openhive.network
    BLOG_DOMAIN: https://blog.openhive.network
    EXPLORER_DOMAIN: https://explore.openhive.network
    IMAGE_NAME: $WALLET_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: main-wallet-mainnet
    url: https://wallet.openhive.network
    on_stop: main:stop-wallet-mainnet

main:deploy-auth-mirrornet:
  extends: .deploy_template_mirrornet
  needs:
    - docker-build-auth
  variables:
    CONTAINER_NAME: denser-main-auth-mirror
    PORT: 9233
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    SITE_DOMAIN: https://auth.fake.openhive.network
    EXPLORER_DOMAIN: https://testexplorer.openhive.network
    IMAGE_NAME: $AUTH_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: main-auth-mirrornet
    url: https://auth.fake.openhive.network
    on_stop: main:stop-auth-mirrornet

main:deploy-blog-mirrornet:
  extends: .deploy_template_mirrornet
  needs:
    - docker-build-blog
    - e2e-tests-blog
  variables:
    CONTAINER_NAME: denser-main-blog-mirror
    PORT: 9211
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    SITE_DOMAIN: https://blog.fake.openhive.network
    WALLET_ENDPOINT: https://wallet.fake.openhive.network
    EXPLORER_DOMAIN: https://testexplorer.openhive.network
    IMAGE_NAME: $BLOG_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: main-blog-mirrornet
    url: https://blog.fake.openhive.network
    on_stop: main:stop-blog-mirrornet

main:deploy-wallet-mirrornet:
  extends: .deploy_template_mirrornet
  needs:
    - docker-build-wallet
    - e2e-tests-wallet
  variables:
    CONTAINER_NAME: denser-main-wallet-mirror
    PORT: 9222
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    SITE_DOMAIN: https://wallet.fake.openhive.network
    BLOG_DOMAIN: https://blog.fake.openhive.network
    EXPLORER_DOMAIN: https://testexplorer.openhive.network
    IMAGE_NAME: $WALLET_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  environment:
    name: main-wallet-mirrornet
    url: https://wallet.fake.openhive.network
    on_stop: main:stop-wallet-mirrornet

# Stop jobs template
.stop_template:
  extends: .job-defaults
  stage: cleanup
  script:
    - docker ps -q --filter "name=$CONTAINER_NAME" | grep -q . && docker stop $CONTAINER_NAME
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true
  tags:
    - hs-denser

# Stop jobs for main deployments
main:stop-auth-mainnet:
  extends: .stop_template
  needs:
    - job: main:deploy-auth-mainnet
      optional: true
  variables:
    CONTAINER_NAME: denser-main-auth
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: main-auth-mainnet
    action: stop

main:stop-blog-mainnet:
  extends: .stop_template
  needs:
    - job: main:deploy-blog-mainnet
      optional: true
  variables:
    CONTAINER_NAME: denser-main-blog
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: main-blog-mainnet
    action: stop

main:stop-wallet-mainnet:
  extends: .stop_template
  needs:
    - job: main:deploy-wallet-mainnet
      optional: true
  variables:
    CONTAINER_NAME: denser-main-wallet
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: main-wallet-mainnet
    action: stop

main:stop-auth-mirrornet:
  extends: .stop_template
  needs:
    - job: main:deploy-auth-mirrornet
      optional: true
  variables:
    CONTAINER_NAME: denser-main-auth-mirror
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: main-auth-mirrornet
    action: stop

main:stop-blog-mirrornet:
  extends: .stop_template
  needs:
    - job: main:deploy-blog-mirrornet
      optional: true
  variables:
    CONTAINER_NAME: denser-main-blog-mirror
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: main-blog-mirrornet
    action: stop

main:stop-wallet-mirrornet:
  extends: .stop_template
  needs:
    - job: main:deploy-wallet-mirrornet
      optional: true
  variables:
    CONTAINER_NAME: denser-main-wallet-mirror
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  environment:
    name: main-wallet-mirrornet
    action: stop

# Develop branch deployments
develop:deploy-auth-mainnet:
  extends: .deploy_template_mainnet
  needs:
    - docker-build-auth
  variables:
    CONTAINER_NAME: denser-dev-auth
    PORT: 8133
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    SITE_DOMAIN: https://auth.dev.openhive.network
    EXPLORER_DOMAIN: https://explore.openhive.network
    IMAGE_NAME: $AUTH_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
  environment:
    name: develop-auth-mainnet
    url: https://auth.dev.openhive.network
    on_stop: develop:stop-auth-mainnet

develop:deploy-blog-mainnet:
  extends: .deploy_template_mainnet
  needs:
    - docker-build-blog
   # - e2e-tests-blog
  variables:
    CONTAINER_NAME: denser-dev-blog
    PORT: 8111
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    SITE_DOMAIN: https://blog.dev.openhive.network
    WALLET_ENDPOINT: https://wallet.dev.openhive.network
    EXPLORER_DOMAIN: https://explore.openhive.network
    IMAGE_NAME: $BLOG_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
  environment:
    name: develop-blog-mainnet
    url: https://blog.dev.openhive.network
    on_stop: develop:stop-blog-mainnet

develop:deploy-wallet-mainnet:
  extends: .deploy_template_mainnet
  needs:
    - docker-build-wallet
    - e2e-tests-wallet
  variables:
    CONTAINER_NAME: denser-dev-wallet
    PORT: 8122
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    SITE_DOMAIN: https://wallet.dev.openhive.network
    BLOG_DOMAIN: https://blog.dev.openhive.network
    EXPLORER_DOMAIN: https://explore.openhive.network
    IMAGE_NAME: $WALLET_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
  environment:
    name: develop-wallet-mainnet
    url: https://wallet.dev.openhive.network
    on_stop: develop:stop-wallet-mainnet

develop:deploy-auth-mirrornet:
  extends: .deploy_template_mirrornet
  needs:
    - docker-build-auth
  variables:
    CONTAINER_NAME: denser-dev-auth-mirror
    PORT: 8233
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    SITE_DOMAIN: https://auth.dev.fake.openhive.network
    EXPLORER_DOMAIN: https://testexplorer.openhive.network
    IMAGE_NAME: $AUTH_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
  environment:
    name: develop-auth-mirrornet
    url: https://auth.dev.fake.openhive.network
    on_stop: develop:stop-auth-mirrornet

develop:deploy-blog-mirrornet:
  extends: .deploy_template_mirrornet
  needs:
    - docker-build-blog
    #- e2e-tests-blog
  variables:
    CONTAINER_NAME: denser-dev-blog-mirror
    PORT: 8211
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    SITE_DOMAIN: https://blog.dev.fake.openhive.network
    WALLET_ENDPOINT: https://wallet.dev.fake.openhive.network
    EXPLORER_DOMAIN: https://testexplorer.openhive.network
    IMAGE_NAME: $BLOG_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
  environment:
    name: develop-blog-mirrornet
    url: https://blog.dev.fake.openhive.network
    on_stop: develop:stop-blog-mirrornet

develop:deploy-wallet-mirrornet:
  extends: .deploy_template_mirrornet
  needs:
    - docker-build-wallet
    - e2e-tests-wallet
  variables:
    CONTAINER_NAME: denser-dev-wallet-mirror
    PORT: 8222
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    SITE_DOMAIN: https://wallet.dev.fake.openhive.network
    BLOG_DOMAIN: https://blog.dev.fake.openhive.network
    EXPLORER_DOMAIN: https://testexplorer.openhive.network
    IMAGE_NAME: $WALLET_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
  environment:
    name: develop-wallet-mirrornet
    url: https://wallet.dev.fake.openhive.network
    on_stop: develop:stop-wallet-mirrornet

# Stop jobs for develop deployments
develop:stop-auth-mainnet:
  extends: .stop_template
  needs:
    - job: develop:deploy-auth-mainnet
      optional: true
  variables:
    CONTAINER_NAME: denser-dev-auth
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
      when: manual
      allow_failure: true
  environment:
    name: develop-auth-mainnet
    action: stop

develop:stop-blog-mainnet:
  extends: .stop_template
  needs:
    - job: develop:deploy-blog-mainnet
      optional: true
  variables:
    CONTAINER_NAME: denser-dev-blog
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
      when: manual
      allow_failure: true
  environment:
    name: develop-blog-mainnet
    action: stop

develop:stop-wallet-mainnet:
  extends: .stop_template
  needs:
    - job: develop:deploy-wallet-mainnet
      optional: true
  variables:
    CONTAINER_NAME: denser-dev-wallet
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
      when: manual
      allow_failure: true
  environment:
    name: develop-wallet-mainnet
    action: stop

develop:stop-auth-mirrornet:
  extends: .stop_template
  needs:
    - job: develop:deploy-auth-mirrornet
      optional: true
  variables:
    CONTAINER_NAME: denser-dev-auth-mirror
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
      when: manual
      allow_failure: true
  environment:
    name: develop-auth-mirrornet
    action: stop

develop:stop-blog-mirrornet:
  extends: .stop_template
  needs:
    - job: develop:deploy-blog-mirrornet
      optional: true
  variables:
    CONTAINER_NAME: denser-dev-blog-mirror
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
      when: manual
      allow_failure: true
  environment:
    name: develop-blog-mirrornet
    action: stop

develop:stop-wallet-mirrornet:
  extends: .stop_template
  needs:
    - job: develop:deploy-wallet-mirrornet
      optional: true
  variables:
    CONTAINER_NAME: denser-dev-wallet-mirror
  rules:
    - if: $CI_COMMIT_BRANCH == "feature/new-search"
      when: manual
      allow_failure: true
  environment:
    name: develop-wallet-mirrornet
    action: stop
