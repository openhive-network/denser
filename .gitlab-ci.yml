stages:
  - build
  - test
  - test-report-aggregate
  - deploy

variables:
  # Variables required by Common CI jobs
  CI_COMMON_JOB_VERSION: '5c42c8019dd329000fd036668b22eb3eb99a743a'
  DOCKER_BUILDER_TAG: '$CI_COMMON_JOB_VERSION'
  DOCKER_DIND_TAG: '$CI_COMMON_JOB_VERSION'
  IMAGE_REMOVER_TAG: '$CI_COMMON_JOB_VERSION'
  BLOG_APP_SRC_DIR: 'apps/blog/'

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - project: 'hive/common-ci-configuration'
    ref: 5c42c8019dd329000fd036668b22eb3eb99a743a # develop
    file: '/templates/docker_image_jobs.gitlab-ci.yml'

.docker_build_template:
  extends: .docker_image_builder_job_template
  stage: build
  before_script:
    - !reference [.docker_image_builder_job_template, before_script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
  script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):tag[collapsed=true]\r\e[0KDetermining tag for the new image..."
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
        export TAG="latest"
      else
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $CI_COMMIT_REF_SLUG"
        export TAG="$CI_COMMIT_REF_SLUG"
      fi
      echo -e "\e[0Ksection_end:$(date +%s):tag\r\e[0K"
      echo -e "\e[0Ksection_start:$(date +%s):build[collapsed=true]\r\e[0KBaking image "$CI_REGISTRY_IMAGE/${TURBO_APP_NAME}:${TAG}"..."
      git config --global --add safe.directory "$CI_PROJECT_DIR"
      scripts/build_instance.sh --progress=plain "$CI_PROJECT_DIR"
      echo "IMAGE_NAME=${CI_REGISTRY_IMAGE}/${TURBO_APP_NAME}:${CI_COMMIT_SHORT_SHA}" > docker-build.env
      echo "Unique image tag:"
      cat docker-build.env
      echo -e "\e[0Ksection_end:$(date +%s):build\r\e[0K"
  artifacts:
    paths:
      - docker-build.env
    reports:
      dotenv: docker-build.env
  tags:
    - public-runner-docker

.docker-build-auth:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/auth'
    TURBO_APP_PATH: '/apps/auth'
    TURBO_APP_NAME: 'auth'

.docker-build-blog:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    TURBO_APP_NAME: 'blog'

.docker-build-wallet:
  extends: .docker_build_template
  variables:
    TURBO_APP_SCOPE: '@hive/wallet'
    TURBO_APP_PATH: '/apps/wallet'
    TURBO_APP_NAME: 'wallet'

.node-job:
  extends: .job-defaults
  image:
    name: node:20.11.1-alpine3.18
    entrypoint: []
  stage: test
  script:
    - |
      echo -e "\e[0Ksection_start:$(date +%s):deps[collapsed=true]\r\e[0KInstalling dependencies..."
      npm ci --cache .npm
      echo -e "\e[0Ksection_end:$(date +%s):deps\r\e[0K"
  cache:
    key: '$TURBO_APP_SCOPE-cache-1'
    paths:
      - .npm/
      - .next/
  artifacts:
    name: '$CI_JOB_NAME-$CI_COMMIT_REF_NAME'
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker

.e2e_tests_template:
  extends: .node-job
  image: mcr.microsoft.com/playwright:v1.41.1-jammy
  # parallel:
  #   matrix:
  #     - PROJECT: ['chromium', 'firefox', 'webkit']
  #       SHARD_INDEX: [1, 2, 3, 4, 5]
  #       SHARD_TOTAL: 5
  script:
    - !reference [.node-job, script]
    - |
      echo -e "\e[0Ksection_start:$(date +%s):tests[collapsed=false]\r\e[0KRunning tests..."
      cd .$TURBO_APP_PATH
      npx playwright test hbauthLoginDialog.spec.ts --project=chromium --update-snapshots
      echo -e "\e[0Ksection_end:$(date +%s):tests\r\e[0K"
  artifacts:
    paths:
      - .${TURBO_APP_PATH}/playwright-report/
      - .${TURBO_APP_PATH}/test-results/
      - .${TURBO_APP_PATH}/junit/
    reports:
      junit: .${TURBO_APP_PATH}/junit/**/**/results.xml

e2e-tests-blog:
  extends: .e2e_tests_template
  # needs:
  #   - docker-build-blog
  services:
    - name: registry.gitlab.syncad.com/hive/denser/blog:9e5ac7d6
      alias: denser
      variables:
        HEALTHCHECK_TCP_PORT: '3000'
  variables:
    TURBO_APP_SCOPE: '@hive/blog'
    TURBO_APP_PATH: '/apps/blog'
    REACT_APP_API_ENDPOINT: https://api.hive.blog
    REACT_APP_IMAGES_ENDPOINT: https://images.hive.blog/
    PORT: 3000
    DENSER_URL: http://denser:$PORT

# e2e-tests-wallet:
#   extends: .e2e_tests_template
#   needs:
#     - docker-build-wallet
#   services:
#     - name: $IMAGE_NAME
#       alias: denser
#       variables:
#         HEALTHCHECK_TCP_PORT: '4000'
#   variables:
#     TURBO_APP_SCOPE: '@hive/wallet'
#     TURBO_APP_PATH: '/apps/wallet'
#     REACT_APP_API_ENDPOINT: https://api.hive.blog
#     REACT_APP_IMAGES_ENDPOINT: https://images.hive.blog/
#     PORT: 4000
#     DENSER_URL: http://denser:$PORT

# .e2e_report_aggregate_template:
#   extends: .node-job
#   stage: test-report-aggregate
#   when: always
#   image: mcr.microsoft.com/playwright:v1.41.1-jammy
#   script:
#     - cd .$TURBO_APP_PATH
#     - npm install playwright-merge-html-reports --dev
#     - npx playwright test tests/merge-reports --config playwright.merge.config.ts
#   artifacts:
#     paths:
#       - .${TURBO_APP_PATH}/merged-html-report/
#       - .${TURBO_APP_PATH}/junit/

# e2e-report-aggregate-blog:
#   extends: .e2e_report_aggregate_template
#   needs:
#     - e2e-tests-blog
#   variables:
#     TURBO_APP_SCOPE: '@hive/blog'
#     TURBO_APP_PATH: '/apps/blog'
#     PROJECTS: '["chromium", "firefox", "webkit"]'
#     SHARD_TOTAL: 5

# e2e-report-aggregate-wallet:
#   extends: .e2e_report_aggregate_template
#   needs:
#     - e2e-tests-wallet
#   variables:
#     TURBO_APP_SCOPE: '@hive/wallet'
#     TURBO_APP_PATH: '/apps/wallet'
#     PROJECTS: '["chromium", "firefox", "webkit"]'
#     SHARD_TOTAL: 5

# publish:
#   image:
#     name: node:20.11.1-alpine3.18
#     entrypoint: []
#   extends: .job-defaults
#   stage: deploy
#   script:
#     # Extract a few values from package.json
#     - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
#     - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

#     # Validate that the package name is properly scoped to the project's root namespace.
#     # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
#     - |
#       if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
#         echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
#         echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
#         exit 1
#       fi

#     # Compare the version in package.json to all published versions.
#     # If the package.json version has not yet been published, run `npm publish`.
#     - |
#       if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
#         npm publish
#         echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
#       else
#         echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
#       fi
#   rules:
#     - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
#       when: manual
#       allow_failure: true
#   tags:
#     - public-runner-docker

# .deploy_template_for_staging:
#   extends: .job-defaults
#   stage: deploy
#   before_script:
#     - |
#       echo -e "\e[0Ksection_start:$(date +%s):login[collapsed=true]\r\e[0KLogging to Docker registry..."
#       docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#       echo -e "\e[0Ksection_end:$(date +%s):login\r\e[0K"
#   script:
#     - |
#       scripts/run_instance.sh \
#         --image="$IMAGE_NAME" \
#         --app-scope="$TURBO_APP_SCOPE" \
#         --app-path="$TURBO_APP_PATH" \
#         --api-endpoint="$API_ENDPOINT" \
#         --images-endpoint="$IMAGES_ENDPOINT" \
#         --name="$CONTAINER_NAME" \
#         --port=$PORT \
#         --detach
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#       when: manual
#       allow_failure: true
#   tags:
#     - hs-denser

# staging:deploy-auth:
#   extends: .deploy_template_for_staging
#   needs:
#     - docker-build-auth
#   variables:
#     PORT: 7000
#     API_ENDPOINT: https://api.hive.blog
#     IMAGES_ENDPOINT: https://images.hive.blog/
#     CONTAINER_NAME: denser-auth
#     TURBO_APP_SCOPE: '@hive/auth'
#     TURBO_APP_PATH: '/apps/auth'
#   environment:
#     name: staging-auth
#     action: start
#     on_stop: staging:stop-auth

# staging:deploy-blog:
#   extends: .deploy_template_for_staging
#   needs:
#     - docker-build-blog
#   variables:
#     PORT: 3000
#     API_ENDPOINT: https://api.hive.blog
#     IMAGES_ENDPOINT: https://images.hive.blog/
#     WALLET_ENDPOINT: https://wallet.openhive.network
#     CONTAINER_NAME: denser-blog
#     TURBO_APP_SCOPE: '@hive/blog'
#     TURBO_APP_PATH: '/apps/blog'
#   environment:
#     name: staging-blog
#     action: start
#     on_stop: staging:stop-blog

# staging:deploy-wallet:
#   extends: .deploy_template_for_staging
#   needs:
#     - docker-build-wallet
#   variables:
#     PORT: 4000
#     API_ENDPOINT: https://api.hive.blog
#     IMAGES_ENDPOINT: https://images.hive.blog/
#     CONTAINER_NAME: denser-wallet
#     TURBO_APP_SCOPE: '@hive/wallet'
#     TURBO_APP_PATH: '/apps/wallet'
#   environment:
#     name: staging-wallet
#     action: start
#     on_stop: staging:stop-wallet

# .stop_template_for_staging:
#   extends: .job-defaults
#   stage: deploy
#   script:
#     - docker ps -q --filter "name=$CONTAINER_NAME" | grep -q . && docker stop $CONTAINER_NAME
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#       when: manual
#       allow_failure: true
#   tags:
#     - hs-denser

# staging:stop-auth:
#   extends: .stop_template_for_staging
#   needs:
#     - staging:deploy-auth
#   environment:
#     name: staging-auth
#     action: stop
#   variables:
#     CONTAINER_NAME: denser-auth
#     GIT_STRATEGY: none

# staging:stop-blog:
#   extends: .stop_template_for_staging
#   needs:
#     - staging:deploy-blog
#   environment:
#     name: staging-blog
#     action: stop
#   variables:
#     CONTAINER_NAME: denser-blog
#     GIT_STRATEGY: none

# staging:stop-wallet:
#   extends: .stop_template_for_staging
#   needs:
#     - staging:deploy-wallet
#   environment:
#     name: staging-wallet
#     action: stop
#   variables:
#     CONTAINER_NAME: denser-wallet
#     GIT_STRATEGY: none

# review:deploy-auth:
#   extends: staging:deploy-auth
#   variables:
#     PORT: 7001
#     CONTAINER_NAME: denser-review-auth
#   environment:
#     name: review-auth
#     action: start
#     on_stop: review:stop-auth
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^rc_.*/
#       when: on_success

# review:deploy-blog:
#   extends: staging:deploy-blog
#   variables:
#     PORT: 3001
#     CONTAINER_NAME: denser-review-blog
#   environment:
#     name: review-blog
#     action: start
#     on_stop: review:stop-blog
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^rc_.*/
#       when: on_success

# review:deploy-wallet:
#   extends: staging:deploy-wallet
#   variables:
#     PORT: 4001
#     CONTAINER_NAME: denser-review-wallet
#   environment:
#     name: review-wallet
#     action: start
#     on_stop: review:stop-wallet
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^rc_.*/
#       when: on_success

# review:stop-auth:
#   extends: staging:stop-auth
#   needs:
#     - review:deploy-auth
#   variables:
#     CONTAINER_NAME: denser-review-auth
#   environment:
#     name: review-auth
#     action: stop
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^rc_.*/
#       when: manual
#       allow_failure: true

# review:stop-blog:
#   extends: staging:stop-blog
#   needs:
#     - review:deploy-blog
#   variables:
#     CONTAINER_NAME: denser-review-blog
#   environment:
#     name: review-blog
#     action: stop
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^rc_.*/
#       when: manual
#       allow_failure: true

# review:stop-wallet:
#   extends: staging:stop-wallet
#   needs:
#     - review:deploy-wallet
#   variables:
#     CONTAINER_NAME: denser-review-wallet
#   environment:
#     name: review-wallet
#     action: stop
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^rc_.*/
#       when: manual
#       allow_failure: true
